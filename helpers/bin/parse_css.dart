import 'dart:io';

import 'package:code_builder/code_builder.dart';
import 'package:dart_style/dart_style.dart';
import 'package:helpers/color_visitor.dart';
import 'package:csslib/visitor.dart' as v;
import 'package:csslib/parser.dart' as p;
import 'package:helpers/hex_colors.dart';
import 'package:sass_api/sass_api.dart';

void main(List<String> args) {
  String path = args[0];

  File cssFile = File(path);
  File outFile = File("lib/src/tailwind_colors.dart");
  if (!outFile.existsSync()) {
    outFile.createSync(recursive: true);
  }

  // print(cssFile.existsSync());

  String contents = cssFile.readAsStringSync().replaceFirst(
    "@theme default",
    "html",
  );

  v.StyleSheet tree = p.parse(contents);

  var colorVisitor = ColorVisitor();
  tree.visit(colorVisitor);

  print(
    colorVisitor.parsedSwatches.map((k, v) => MapEntry(k, v.keys.toList())),
  );
  print("-----");
  print(colorVisitor.parsedColors);

  final LibraryBuilder libraryBuilder = LibraryBuilder();
  libraryBuilder.directives.add(Directive.import("dart:ui"));
  libraryBuilder.directives.add(
    Directive.import("package:flutter/rendering.dart"),
  );

  libraryBuilder.generatedByComment =
      "Generated by `helpers/bin/parse_css_hex.dart`.";
  libraryBuilder.comments.addAll([
    "This file contains all to the tailwind colors, and swatches.",
    "The values here were converted from their original `oklch` color-space to the widest-possible colorspace that Flutter currently supports, which is `display-p3`.",
    "The original values are taken from the Tailwind CSS source.",
  ]);

  final Class colorClass = Class((b) {
    b.name = "TwBasicColors";
    b.abstract = true;
    b.docs.addAll([
      "/// All of the basic colors defined as a part of Tailwind.",
    ]);

    for (var e in colorVisitor.parsedColors.entries) {
      b.fields.add(
        Field((b) {
          b.modifier = FieldModifier.constant;
          b.static = true;
          b.name = e.key;
          b.type = Reference("Color");
          SassColor color = e.value;
          String colorSpace;
          if (color.space == ColorSpace.a98Rgb) {
            colorSpace = "sRGB";
          } else {
            color = color.toSpace(ColorSpace.displayP3);
            colorSpace = "displayP3";
          }
          b.assignment = Code(
            "Color.from(alpha:${color.alpha}, red:${color.channel("red") / 255}, green:${color.channel("green") / 255}, blue:${color.channel("blue") / 255}, colorSpace: ColorSpace.$colorSpace)",
          );
        }),
      );
    }
    b.fields.add(
      Field((b) {
        b.name = "colorList";
        b.static = true;
        b.modifier = FieldModifier.constant;
        b.type = Reference("Map<String,Color>");
        b.assignment = Code(
          "{${colorVisitor.parsedColors.keys.map((e) => "'$e' : $e").join(", ")}}",
        );
        b.docs.addAll([
          "/// A list of all colors defined in this class.",
          "///",
          "///This is mainly meant for use in color-pickers, etc.",
        ]);
      }),
    );
  });

  final Class swatchClass = Class((b) {
    b.name = "TwSwatchColors";
    b.abstract = true;
    b.docs.addAll([
      "/// All of the color swatches defined as a part of Tailwind.",
    ]);

    for (var c in colorVisitor.parsedSwatches.entries) {
      FieldBuilder fieldBuilder = FieldBuilder();
      fieldBuilder.name = c.key;
      fieldBuilder.modifier = FieldModifier.constant;
      fieldBuilder.static = true;
      fieldBuilder.type = Reference("ColorSwatch<int>");

      StringBuffer codeBuffer = StringBuffer("ColorSwatch(");

      codeBuffer.write("0xff${hexColors[c.key]![500]!.substring(1)}");

      codeBuffer.write(",{");
      for (var s in c.value.entries) {
        SassColor color = s.value;
        String colorSpace;
        if (color.space == ColorSpace.a98Rgb) {
          colorSpace = "sRGB";
        } else {
          color = color.toSpace(ColorSpace.displayP3);
          colorSpace = "displayP3";
        }
        codeBuffer.write(
          "${s.key.toRadixString(10)}: Color.from(alpha:${color.alpha}, red:${color.channel("red")}, green:${color.channel("green")}, blue:${color.channel("blue")}, colorSpace: ColorSpace.$colorSpace),",
        );
      }
      codeBuffer.write("}");

      codeBuffer.write(")");
      fieldBuilder.assignment = Code(codeBuffer.toString());

      b.fields.add(fieldBuilder.build());
    }
    b.fields.add(
      Field((b) {
        b.name = "colorList";
        b.modifier = FieldModifier.constant;
        b.type = Reference("Map<String,ColorSwatch<int>>");
        b.static = true;
        b.assignment = Code(
          "{${colorVisitor.parsedSwatches.keys.map((e) => "'$e' : $e").join(', ')}}",
        );
      }),
    );
  });

  libraryBuilder.body.addAll([colorClass, swatchClass]);

  Library mainLib = libraryBuilder.build();

  DartEmitter emitter = DartEmitter();
  DartFormatter formatter = DartFormatter(
    languageVersion: DartFormatter.latestLanguageVersion,
  );

  String code = formatter.format('${mainLib.accept(emitter)}');

  // print(formatter.format('${mainLib.accept(emitter)}'));

  outFile.writeAsStringSync(code);
}
